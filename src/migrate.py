import cs50
import sys

msg = """
[WARNING] THIS IS A MAJOR UPDATE. THE ENTIRE CTFOJ FILE STRUCTURE IS CHANGING.
Before migrating, please confirm the following:
 - You are on v3.2.0 (older version please update to one of these first, new version no migrate necessary)
 - You have write permissions in the current directory
Please note that migration is a one-way operation, and you will not be able to revert to the previous version without a FULL backup.

[WARNING] THIS IS A MAJOR UPDATE. THE ENTIRE CTFOJ FILE STRUCTURE IS CHANGING.
You should back up all your data (dl, logs, metadata, database.db, settings.py)
and then completely demolish the CTFOJ directory. Then, completely reinstall
CTFOJ, allow it to create the default files/db, and then once that is
completed, replace the autogenerated files with yours, except for settings.py.
You should manually edit settings.py in case new settings have been added since
your last edit. Then, come back to this script. Did you do that? [y/n] """

confirm = input(msg)
if confirm.lower() != 'y':
    print('Aborting...')
    sys.exit()

msg = """Are you sure you wish to migrate? [y/n] """

confirm = input(msg)
if confirm != 'y':
    print('Aborting...')
    sys.exit()

db = cs50.SQL("sqlite:///database.db")

# Create new columns
db.execute("ALTER TABLE users ADD COLUMN 'total_points' integer NOT NULL DEFAULT(0)")
db.execute("ALTER TABLE users ADD COLUMN 'contests_completed' integer NOT NULL DEFAULT(0)")
db.execute("ALTER TABLE users ADD COLUMN 'problems_solved' integer NOT NULL DEFAULT(0)")


# Some submissions are not synced with problem_solved
ac_subs = db.execute("SELECT * FROM submissions WHERE correct=1 AND contest_id IS NULL")
ps_list = db.execute("SELECT * FROM problem_solved")
processed_subs = set([(x["user_id"], x["problem_id"]) for x in ps_list])
need_sync = []
for x in ac_subs:
    item = (x["user_id"], x["problem_id"])
    if item not in processed_subs:
        need_sync.append(item)
    processed_subs.add(item)

if len(need_sync) > 0:
    print(f"legacy: synced {len(need_sync)} subs")
    for item in need_sync:
        db.execute("INSERT INTO problem_solved VALUES(?, ?)", *item)

# Update fields
total_points = db.execute(
    ("SELECT user_id, SUM(problems.point_value) AS pts FROM problem_solved "
     "JOIN problems ON problem_solved.problem_id=problems.id GROUP BY user_id")
)
total_points = {x["user_id"]: x["pts"] for x in total_points}
contest_cnt = db.execute(
    "SELECT user_id, COUNT(contest_id) AS cnt FROM contest_users GROUP BY user_id"
)
contest_cnt = {x["user_id"]: x["cnt"] for x in contest_cnt}
problem_cnt = db.execute(
    "SELECT user_id, COUNT(problem_id) AS cnt FROM problem_solved GROUP BY user_id"
)
problem_cnt = {x["user_id"]: x["cnt"] for x in problem_cnt}
for user in db.execute("SELECT * FROM users"):
    pts = total_points[user["id"]] if user["id"] in total_points else 0
    ccnt = contest_cnt[user["id"]] if user["id"] in contest_cnt else 0
    pcnt = problem_cnt[user["id"]] if user["id"] in problem_cnt else 0
    email = user["email"].lower() #  for the lowercasing email PR
    db.execute(("UPDATE users SET total_points=?, contests_completed=?, "
                "problems_solved=?, email=? WHERE id=?"), pts, ccnt, pcnt, email, user["id"])

print('Migration completed.')
